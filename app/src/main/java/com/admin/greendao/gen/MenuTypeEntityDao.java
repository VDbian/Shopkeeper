package com.admin.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.admin.shopkeeper.entity.MenuTypeEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MENU_TYPE_ENTITY".
*/
public class MenuTypeEntityDao extends AbstractDao<MenuTypeEntity, String> {

    public static final String TABLENAME = "MENU_TYPE_ENTITY";

    /**
     * Properties of entity MenuTypeEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ProductTypeID = new Property(0, String.class, "productTypeID", true, "PRODUCT_TYPE_ID");
        public final static Property ProductTypeName = new Property(1, String.class, "productTypeName", false, "PRODUCT_TYPE_NAME");
        public final static Property RestaurantID = new Property(2, String.class, "restaurantID", false, "RESTAURANT_ID");
        public final static Property OrderNO = new Property(3, int.class, "orderNO", false, "ORDER_NO");
        public final static Property IsType = new Property(4, boolean.class, "isType", false, "IS_TYPE");
        public final static Property Check = new Property(5, boolean.class, "check", false, "CHECK");
    }

    private DaoSession daoSession;


    public MenuTypeEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MenuTypeEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MENU_TYPE_ENTITY\" (" + //
                "\"PRODUCT_TYPE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: productTypeID
                "\"PRODUCT_TYPE_NAME\" TEXT," + // 1: productTypeName
                "\"RESTAURANT_ID\" TEXT," + // 2: restaurantID
                "\"ORDER_NO\" INTEGER NOT NULL ," + // 3: orderNO
                "\"IS_TYPE\" INTEGER NOT NULL ," + // 4: isType
                "\"CHECK\" INTEGER NOT NULL );"); // 5: check
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MENU_TYPE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MenuTypeEntity entity) {
        stmt.clearBindings();
 
        String productTypeID = entity.getProductTypeID();
        if (productTypeID != null) {
            stmt.bindString(1, productTypeID);
        }
 
        String productTypeName = entity.getProductTypeName();
        if (productTypeName != null) {
            stmt.bindString(2, productTypeName);
        }
 
        String restaurantID = entity.getRestaurantID();
        if (restaurantID != null) {
            stmt.bindString(3, restaurantID);
        }
        stmt.bindLong(4, entity.getOrderNO());
        stmt.bindLong(5, entity.getIsType() ? 1L: 0L);
        stmt.bindLong(6, entity.getCheck() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MenuTypeEntity entity) {
        stmt.clearBindings();
 
        String productTypeID = entity.getProductTypeID();
        if (productTypeID != null) {
            stmt.bindString(1, productTypeID);
        }
 
        String productTypeName = entity.getProductTypeName();
        if (productTypeName != null) {
            stmt.bindString(2, productTypeName);
        }
 
        String restaurantID = entity.getRestaurantID();
        if (restaurantID != null) {
            stmt.bindString(3, restaurantID);
        }
        stmt.bindLong(4, entity.getOrderNO());
        stmt.bindLong(5, entity.getIsType() ? 1L: 0L);
        stmt.bindLong(6, entity.getCheck() ? 1L: 0L);
    }

    @Override
    protected final void attachEntity(MenuTypeEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public MenuTypeEntity readEntity(Cursor cursor, int offset) {
        MenuTypeEntity entity = new MenuTypeEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // productTypeID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // productTypeName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // restaurantID
            cursor.getInt(offset + 3), // orderNO
            cursor.getShort(offset + 4) != 0, // isType
            cursor.getShort(offset + 5) != 0 // check
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MenuTypeEntity entity, int offset) {
        entity.setProductTypeID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setProductTypeName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRestaurantID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOrderNO(cursor.getInt(offset + 3));
        entity.setIsType(cursor.getShort(offset + 4) != 0);
        entity.setCheck(cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(MenuTypeEntity entity, long rowId) {
        return entity.getProductTypeID();
    }
    
    @Override
    public String getKey(MenuTypeEntity entity) {
        if(entity != null) {
            return entity.getProductTypeID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MenuTypeEntity entity) {
        return entity.getProductTypeID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
