package com.admin.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.admin.shopkeeper.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, String> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property RoleID = new Property(2, String.class, "roleID", false, "ROLE_ID");
        public final static Property RestaurantID = new Property(3, String.class, "restaurantID", false, "RESTAURANT_ID");
        public final static Property State = new Property(4, int.class, "state", false, "STATE");
        public final static Property OperaType = new Property(5, String.class, "operaType", false, "OPERA_TYPE");
        public final static Property PermissionName = new Property(6, String.class, "permissionName", false, "PERMISSION_NAME");
        public final static Property PermissionValue = new Property(7, String.class, "permissionValue", false, "PERMISSION_VALUE");
        public final static Property PrintSet = new Property(8, String.class, "printSet", false, "PRINT_SET");
        public final static Property PayType = new Property(9, String.class, "payType", false, "PAY_TYPE");
        public final static Property CashPayType = new Property(10, String.class, "cashPayType", false, "CASH_PAY_TYPE");
        public final static Property MasterType = new Property(11, String.class, "masterType", false, "MASTER_TYPE");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"ROLE_ID\" TEXT," + // 2: roleID
                "\"RESTAURANT_ID\" TEXT," + // 3: restaurantID
                "\"STATE\" INTEGER NOT NULL ," + // 4: state
                "\"OPERA_TYPE\" TEXT," + // 5: operaType
                "\"PERMISSION_NAME\" TEXT," + // 6: permissionName
                "\"PERMISSION_VALUE\" TEXT," + // 7: permissionValue
                "\"PRINT_SET\" TEXT," + // 8: printSet
                "\"PAY_TYPE\" TEXT," + // 9: payType
                "\"CASH_PAY_TYPE\" TEXT," + // 10: cashPayType
                "\"MASTER_TYPE\" TEXT);"); // 11: masterType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String roleID = entity.getRoleID();
        if (roleID != null) {
            stmt.bindString(3, roleID);
        }
 
        String restaurantID = entity.getRestaurantID();
        if (restaurantID != null) {
            stmt.bindString(4, restaurantID);
        }
        stmt.bindLong(5, entity.getState());
 
        String operaType = entity.getOperaType();
        if (operaType != null) {
            stmt.bindString(6, operaType);
        }
 
        String permissionName = entity.getPermissionName();
        if (permissionName != null) {
            stmt.bindString(7, permissionName);
        }
 
        String permissionValue = entity.getPermissionValue();
        if (permissionValue != null) {
            stmt.bindString(8, permissionValue);
        }
 
        String printSet = entity.getPrintSet();
        if (printSet != null) {
            stmt.bindString(9, printSet);
        }
 
        String payType = entity.getPayType();
        if (payType != null) {
            stmt.bindString(10, payType);
        }
 
        String cashPayType = entity.getCashPayType();
        if (cashPayType != null) {
            stmt.bindString(11, cashPayType);
        }
 
        String masterType = entity.getMasterType();
        if (masterType != null) {
            stmt.bindString(12, masterType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String roleID = entity.getRoleID();
        if (roleID != null) {
            stmt.bindString(3, roleID);
        }
 
        String restaurantID = entity.getRestaurantID();
        if (restaurantID != null) {
            stmt.bindString(4, restaurantID);
        }
        stmt.bindLong(5, entity.getState());
 
        String operaType = entity.getOperaType();
        if (operaType != null) {
            stmt.bindString(6, operaType);
        }
 
        String permissionName = entity.getPermissionName();
        if (permissionName != null) {
            stmt.bindString(7, permissionName);
        }
 
        String permissionValue = entity.getPermissionValue();
        if (permissionValue != null) {
            stmt.bindString(8, permissionValue);
        }
 
        String printSet = entity.getPrintSet();
        if (printSet != null) {
            stmt.bindString(9, printSet);
        }
 
        String payType = entity.getPayType();
        if (payType != null) {
            stmt.bindString(10, payType);
        }
 
        String cashPayType = entity.getCashPayType();
        if (cashPayType != null) {
            stmt.bindString(11, cashPayType);
        }
 
        String masterType = entity.getMasterType();
        if (masterType != null) {
            stmt.bindString(12, masterType);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // roleID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // restaurantID
            cursor.getInt(offset + 4), // state
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // operaType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // permissionName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // permissionValue
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // printSet
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // payType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // cashPayType
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // masterType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRoleID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRestaurantID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setState(cursor.getInt(offset + 4));
        entity.setOperaType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPermissionName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPermissionValue(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPrintSet(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPayType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCashPayType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMasterType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final String updateKeyAfterInsert(User entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
