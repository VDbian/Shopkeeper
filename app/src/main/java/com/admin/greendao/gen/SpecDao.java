package com.admin.greendao.gen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.admin.shopkeeper.entity.FoodEntity;

import com.admin.shopkeeper.entity.Spec;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SPEC".
*/
public class SpecDao extends AbstractDao<Spec, String> {

    public static final String TABLENAME = "SPEC";

    /**
     * Properties of entity Spec.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GuId = new Property(0, String.class, "guId", true, "GU_ID");
        public final static Property RestaurantID = new Property(1, String.class, "restaurantID", false, "RESTAURANT_ID");
        public final static Property ProtuctID = new Property(2, String.class, "protuctID", false, "PROTUCT_ID");
        public final static Property ProtuctName = new Property(3, String.class, "protuctName", false, "PROTUCT_NAME");
        public final static Property Price = new Property(4, double.class, "price", false, "PRICE");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
    }

    private DaoSession daoSession;

    private Query<Spec> foodEntity_SpecListQuery;

    public SpecDao(DaoConfig config) {
        super(config);
    }
    
    public SpecDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SPEC\" (" + //
                "\"GU_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: guId
                "\"RESTAURANT_ID\" TEXT," + // 1: restaurantID
                "\"PROTUCT_ID\" TEXT," + // 2: protuctID
                "\"PROTUCT_NAME\" TEXT," + // 3: protuctName
                "\"PRICE\" REAL NOT NULL ," + // 4: price
                "\"NAME\" TEXT);"); // 5: name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SPEC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Spec entity) {
        stmt.clearBindings();
 
        String guId = entity.getGuId();
        if (guId != null) {
            stmt.bindString(1, guId);
        }
 
        String restaurantID = entity.getRestaurantID();
        if (restaurantID != null) {
            stmt.bindString(2, restaurantID);
        }
 
        String protuctID = entity.getProtuctID();
        if (protuctID != null) {
            stmt.bindString(3, protuctID);
        }
 
        String protuctName = entity.getProtuctName();
        if (protuctName != null) {
            stmt.bindString(4, protuctName);
        }
        stmt.bindDouble(5, entity.getPrice());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Spec entity) {
        stmt.clearBindings();
 
        String guId = entity.getGuId();
        if (guId != null) {
            stmt.bindString(1, guId);
        }
 
        String restaurantID = entity.getRestaurantID();
        if (restaurantID != null) {
            stmt.bindString(2, restaurantID);
        }
 
        String protuctID = entity.getProtuctID();
        if (protuctID != null) {
            stmt.bindString(3, protuctID);
        }
 
        String protuctName = entity.getProtuctName();
        if (protuctName != null) {
            stmt.bindString(4, protuctName);
        }
        stmt.bindDouble(5, entity.getPrice());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
    }

    @Override
    protected final void attachEntity(Spec entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Spec readEntity(Cursor cursor, int offset) {
        Spec entity = new Spec( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // guId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // restaurantID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // protuctID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // protuctName
            cursor.getDouble(offset + 4), // price
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Spec entity, int offset) {
        entity.setGuId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRestaurantID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProtuctID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProtuctName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrice(cursor.getDouble(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Spec entity, long rowId) {
        return entity.getGuId();
    }
    
    @Override
    public String getKey(Spec entity) {
        if(entity != null) {
            return entity.getGuId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Spec entity) {
        return entity.getGuId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "specList" to-many relationship of FoodEntity. */
    public List<Spec> _queryFoodEntity_SpecList(String protuctID) {
        synchronized (this) {
            if (foodEntity_SpecListQuery == null) {
                QueryBuilder<Spec> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ProtuctID.eq(null));
                foodEntity_SpecListQuery = queryBuilder.build();
            }
        }
        Query<Spec> query = foodEntity_SpecListQuery.forCurrentThread();
        query.setParameter(0, protuctID);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getFoodEntityDao().getAllColumns());
            builder.append(" FROM SPEC T");
            builder.append(" LEFT JOIN FOOD_ENTITY T0 ON T.\"PROTUCT_ID\"=T0.\"PRODUCT_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Spec loadCurrentDeep(Cursor cursor, boolean lock) {
        Spec entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        FoodEntity food = loadCurrentOther(daoSession.getFoodEntityDao(), cursor, offset);
        entity.setFood(food);

        return entity;    
    }

    public Spec loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Spec> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Spec> list = new ArrayList<Spec>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Spec> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Spec> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
