package com.admin.greendao.gen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.admin.shopkeeper.entity.MenuTypeEntity;

import com.admin.shopkeeper.entity.FoodEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FOOD_ENTITY".
*/
public class FoodEntityDao extends AbstractDao<FoodEntity, String> {

    public static final String TABLENAME = "FOOD_ENTITY";

    /**
     * Properties of entity FoodEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ProductID = new Property(0, String.class, "productID", true, "PRODUCT_ID");
        public final static Property RestaurantID = new Property(1, String.class, "restaurantID", false, "RESTAURANT_ID");
        public final static Property Id = new Property(2, String.class, "id", false, "ID");
        public final static Property ProductName = new Property(3, String.class, "productName", false, "PRODUCT_NAME");
        public final static Property PinYin = new Property(4, String.class, "pinYin", false, "PIN_YIN");
        public final static Property Unit = new Property(5, String.class, "unit", false, "UNIT");
        public final static Property MinUnit = new Property(6, String.class, "minUnit", false, "MIN_UNIT");
        public final static Property ProductTypeID = new Property(7, String.class, "productTypeID", false, "PRODUCT_TYPE_ID");
        public final static Property ProductTypeName = new Property(8, String.class, "productTypeName", false, "PRODUCT_TYPE_NAME");
        public final static Property Price = new Property(9, double.class, "price", false, "PRICE");
        public final static Property ProductFile = new Property(10, String.class, "productFile", false, "PRODUCT_FILE");
        public final static Property ProductImage = new Property(11, String.class, "productImage", false, "PRODUCT_IMAGE");
        public final static Property State = new Property(12, int.class, "state", false, "STATE");
        public final static Property Remark = new Property(13, String.class, "remark", false, "REMARK");
        public final static Property TasteID = new Property(14, String.class, "tasteID", false, "TASTE_ID");
        public final static Property DaZheIs = new Property(15, String.class, "daZheIs", false, "DA_ZHE_IS");
        public final static Property DaZhe = new Property(16, String.class, "daZhe", false, "DA_ZHE");
        public final static Property WarCount = new Property(17, String.class, "warCount", false, "WAR_COUNT");
        public final static Property CloseIs = new Property(18, String.class, "closeIs", false, "CLOSE_IS");
        public final static Property CloseNameIs = new Property(19, String.class, "closeNameIs", false, "CLOSE_NAME_IS");
        public final static Property ProductCount = new Property(20, int.class, "productCount", false, "PRODUCT_COUNT");
        public final static Property ChuCaiType = new Property(21, String.class, "chuCaiType", false, "CHU_CAI_TYPE");
        public final static Property CanDiscount = new Property(22, int.class, "canDiscount", false, "CAN_DISCOUNT");
        public final static Property MemberPice = new Property(23, double.class, "memberPice", false, "MEMBER_PICE");
        public final static Property SalesType = new Property(24, int.class, "salesType", false, "SALES_TYPE");
        public final static Property AccordIng = new Property(25, String.class, "accordIng", false, "ACCORD_ING");
        public final static Property ProductShuXing = new Property(26, String.class, "productShuXing", false, "PRODUCT_SHU_XING");
        public final static Property ProductGive = new Property(27, String.class, "productGive", false, "PRODUCT_GIVE");
        public final static Property TasteType = new Property(28, String.class, "tasteType", false, "TASTE_TYPE");
        public final static Property Type = new Property(29, boolean.class, "type", false, "TYPE");
        public final static Property Guid = new Property(30, String.class, "guid", false, "GUID");
        public final static Property PackageName = new Property(31, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property Counts = new Property(32, String.class, "counts", false, "COUNTS");
    }

    private DaoSession daoSession;

    private Query<FoodEntity> menuTypeEntity_FoodsQuery;

    public FoodEntityDao(DaoConfig config) {
        super(config);
    }
    
    public FoodEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FOOD_ENTITY\" (" + //
                "\"PRODUCT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: productID
                "\"RESTAURANT_ID\" TEXT," + // 1: restaurantID
                "\"ID\" TEXT," + // 2: id
                "\"PRODUCT_NAME\" TEXT," + // 3: productName
                "\"PIN_YIN\" TEXT," + // 4: pinYin
                "\"UNIT\" TEXT," + // 5: unit
                "\"MIN_UNIT\" TEXT," + // 6: minUnit
                "\"PRODUCT_TYPE_ID\" TEXT," + // 7: productTypeID
                "\"PRODUCT_TYPE_NAME\" TEXT," + // 8: productTypeName
                "\"PRICE\" REAL NOT NULL ," + // 9: price
                "\"PRODUCT_FILE\" TEXT," + // 10: productFile
                "\"PRODUCT_IMAGE\" TEXT," + // 11: productImage
                "\"STATE\" INTEGER NOT NULL ," + // 12: state
                "\"REMARK\" TEXT," + // 13: remark
                "\"TASTE_ID\" TEXT," + // 14: tasteID
                "\"DA_ZHE_IS\" TEXT," + // 15: daZheIs
                "\"DA_ZHE\" TEXT," + // 16: daZhe
                "\"WAR_COUNT\" TEXT," + // 17: warCount
                "\"CLOSE_IS\" TEXT," + // 18: closeIs
                "\"CLOSE_NAME_IS\" TEXT," + // 19: closeNameIs
                "\"PRODUCT_COUNT\" INTEGER NOT NULL ," + // 20: productCount
                "\"CHU_CAI_TYPE\" TEXT," + // 21: chuCaiType
                "\"CAN_DISCOUNT\" INTEGER NOT NULL ," + // 22: canDiscount
                "\"MEMBER_PICE\" REAL NOT NULL ," + // 23: memberPice
                "\"SALES_TYPE\" INTEGER NOT NULL ," + // 24: salesType
                "\"ACCORD_ING\" TEXT," + // 25: accordIng
                "\"PRODUCT_SHU_XING\" TEXT," + // 26: productShuXing
                "\"PRODUCT_GIVE\" TEXT," + // 27: productGive
                "\"TASTE_TYPE\" TEXT," + // 28: tasteType
                "\"TYPE\" INTEGER NOT NULL ," + // 29: type
                "\"GUID\" TEXT," + // 30: guid
                "\"PACKAGE_NAME\" TEXT," + // 31: packageName
                "\"COUNTS\" TEXT);"); // 32: counts
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FOOD_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FoodEntity entity) {
        stmt.clearBindings();
 
        String productID = entity.getProductID();
        if (productID != null) {
            stmt.bindString(1, productID);
        }
 
        String restaurantID = entity.getRestaurantID();
        if (restaurantID != null) {
            stmt.bindString(2, restaurantID);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(4, productName);
        }
 
        String pinYin = entity.getPinYin();
        if (pinYin != null) {
            stmt.bindString(5, pinYin);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(6, unit);
        }
 
        String minUnit = entity.getMinUnit();
        if (minUnit != null) {
            stmt.bindString(7, minUnit);
        }
 
        String productTypeID = entity.getProductTypeID();
        if (productTypeID != null) {
            stmt.bindString(8, productTypeID);
        }
 
        String productTypeName = entity.getProductTypeName();
        if (productTypeName != null) {
            stmt.bindString(9, productTypeName);
        }
        stmt.bindDouble(10, entity.getPrice());
 
        String productFile = entity.getProductFile();
        if (productFile != null) {
            stmt.bindString(11, productFile);
        }
 
        String productImage = entity.getProductImage();
        if (productImage != null) {
            stmt.bindString(12, productImage);
        }
        stmt.bindLong(13, entity.getState());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(14, remark);
        }
 
        String tasteID = entity.getTasteID();
        if (tasteID != null) {
            stmt.bindString(15, tasteID);
        }
 
        String daZheIs = entity.getDaZheIs();
        if (daZheIs != null) {
            stmt.bindString(16, daZheIs);
        }
 
        String daZhe = entity.getDaZhe();
        if (daZhe != null) {
            stmt.bindString(17, daZhe);
        }
 
        String warCount = entity.getWarCount();
        if (warCount != null) {
            stmt.bindString(18, warCount);
        }
 
        String closeIs = entity.getCloseIs();
        if (closeIs != null) {
            stmt.bindString(19, closeIs);
        }
 
        String closeNameIs = entity.getCloseNameIs();
        if (closeNameIs != null) {
            stmt.bindString(20, closeNameIs);
        }
        stmt.bindLong(21, entity.getProductCount());
 
        String chuCaiType = entity.getChuCaiType();
        if (chuCaiType != null) {
            stmt.bindString(22, chuCaiType);
        }
        stmt.bindLong(23, entity.getCanDiscount());
        stmt.bindDouble(24, entity.getMemberPice());
        stmt.bindLong(25, entity.getSalesType());
 
        String accordIng = entity.getAccordIng();
        if (accordIng != null) {
            stmt.bindString(26, accordIng);
        }
 
        String productShuXing = entity.getProductShuXing();
        if (productShuXing != null) {
            stmt.bindString(27, productShuXing);
        }
 
        String productGive = entity.getProductGive();
        if (productGive != null) {
            stmt.bindString(28, productGive);
        }
 
        String tasteType = entity.getTasteType();
        if (tasteType != null) {
            stmt.bindString(29, tasteType);
        }
        stmt.bindLong(30, entity.getType() ? 1L: 0L);
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(31, guid);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(32, packageName);
        }
 
        String counts = entity.getCounts();
        if (counts != null) {
            stmt.bindString(33, counts);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FoodEntity entity) {
        stmt.clearBindings();
 
        String productID = entity.getProductID();
        if (productID != null) {
            stmt.bindString(1, productID);
        }
 
        String restaurantID = entity.getRestaurantID();
        if (restaurantID != null) {
            stmt.bindString(2, restaurantID);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(4, productName);
        }
 
        String pinYin = entity.getPinYin();
        if (pinYin != null) {
            stmt.bindString(5, pinYin);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(6, unit);
        }
 
        String minUnit = entity.getMinUnit();
        if (minUnit != null) {
            stmt.bindString(7, minUnit);
        }
 
        String productTypeID = entity.getProductTypeID();
        if (productTypeID != null) {
            stmt.bindString(8, productTypeID);
        }
 
        String productTypeName = entity.getProductTypeName();
        if (productTypeName != null) {
            stmt.bindString(9, productTypeName);
        }
        stmt.bindDouble(10, entity.getPrice());
 
        String productFile = entity.getProductFile();
        if (productFile != null) {
            stmt.bindString(11, productFile);
        }
 
        String productImage = entity.getProductImage();
        if (productImage != null) {
            stmt.bindString(12, productImage);
        }
        stmt.bindLong(13, entity.getState());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(14, remark);
        }
 
        String tasteID = entity.getTasteID();
        if (tasteID != null) {
            stmt.bindString(15, tasteID);
        }
 
        String daZheIs = entity.getDaZheIs();
        if (daZheIs != null) {
            stmt.bindString(16, daZheIs);
        }
 
        String daZhe = entity.getDaZhe();
        if (daZhe != null) {
            stmt.bindString(17, daZhe);
        }
 
        String warCount = entity.getWarCount();
        if (warCount != null) {
            stmt.bindString(18, warCount);
        }
 
        String closeIs = entity.getCloseIs();
        if (closeIs != null) {
            stmt.bindString(19, closeIs);
        }
 
        String closeNameIs = entity.getCloseNameIs();
        if (closeNameIs != null) {
            stmt.bindString(20, closeNameIs);
        }
        stmt.bindLong(21, entity.getProductCount());
 
        String chuCaiType = entity.getChuCaiType();
        if (chuCaiType != null) {
            stmt.bindString(22, chuCaiType);
        }
        stmt.bindLong(23, entity.getCanDiscount());
        stmt.bindDouble(24, entity.getMemberPice());
        stmt.bindLong(25, entity.getSalesType());
 
        String accordIng = entity.getAccordIng();
        if (accordIng != null) {
            stmt.bindString(26, accordIng);
        }
 
        String productShuXing = entity.getProductShuXing();
        if (productShuXing != null) {
            stmt.bindString(27, productShuXing);
        }
 
        String productGive = entity.getProductGive();
        if (productGive != null) {
            stmt.bindString(28, productGive);
        }
 
        String tasteType = entity.getTasteType();
        if (tasteType != null) {
            stmt.bindString(29, tasteType);
        }
        stmt.bindLong(30, entity.getType() ? 1L: 0L);
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(31, guid);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(32, packageName);
        }
 
        String counts = entity.getCounts();
        if (counts != null) {
            stmt.bindString(33, counts);
        }
    }

    @Override
    protected final void attachEntity(FoodEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public FoodEntity readEntity(Cursor cursor, int offset) {
        FoodEntity entity = new FoodEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // productID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // restaurantID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // productName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pinYin
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // unit
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // minUnit
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // productTypeID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // productTypeName
            cursor.getDouble(offset + 9), // price
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // productFile
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // productImage
            cursor.getInt(offset + 12), // state
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // remark
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // tasteID
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // daZheIs
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // daZhe
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // warCount
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // closeIs
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // closeNameIs
            cursor.getInt(offset + 20), // productCount
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // chuCaiType
            cursor.getInt(offset + 22), // canDiscount
            cursor.getDouble(offset + 23), // memberPice
            cursor.getInt(offset + 24), // salesType
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // accordIng
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // productShuXing
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // productGive
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // tasteType
            cursor.getShort(offset + 29) != 0, // type
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // guid
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // packageName
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32) // counts
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FoodEntity entity, int offset) {
        entity.setProductID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRestaurantID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProductName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPinYin(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUnit(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMinUnit(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setProductTypeID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setProductTypeName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPrice(cursor.getDouble(offset + 9));
        entity.setProductFile(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setProductImage(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setState(cursor.getInt(offset + 12));
        entity.setRemark(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTasteID(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDaZheIs(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDaZhe(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setWarCount(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCloseIs(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCloseNameIs(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setProductCount(cursor.getInt(offset + 20));
        entity.setChuCaiType(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setCanDiscount(cursor.getInt(offset + 22));
        entity.setMemberPice(cursor.getDouble(offset + 23));
        entity.setSalesType(cursor.getInt(offset + 24));
        entity.setAccordIng(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setProductShuXing(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setProductGive(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setTasteType(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setType(cursor.getShort(offset + 29) != 0);
        entity.setGuid(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setPackageName(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setCounts(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
     }
    
    @Override
    protected final String updateKeyAfterInsert(FoodEntity entity, long rowId) {
        return entity.getProductID();
    }
    
    @Override
    public String getKey(FoodEntity entity) {
        if(entity != null) {
            return entity.getProductID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FoodEntity entity) {
        return entity.getProductID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "foods" to-many relationship of MenuTypeEntity. */
    public List<FoodEntity> _queryMenuTypeEntity_Foods(String productTypeID) {
        synchronized (this) {
            if (menuTypeEntity_FoodsQuery == null) {
                QueryBuilder<FoodEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ProductTypeID.eq(null));
                menuTypeEntity_FoodsQuery = queryBuilder.build();
            }
        }
        Query<FoodEntity> query = menuTypeEntity_FoodsQuery.forCurrentThread();
        query.setParameter(0, productTypeID);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMenuTypeEntityDao().getAllColumns());
            builder.append(" FROM FOOD_ENTITY T");
            builder.append(" LEFT JOIN MENU_TYPE_ENTITY T0 ON T.\"PRODUCT_TYPE_ID\"=T0.\"PRODUCT_TYPE_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected FoodEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        FoodEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        MenuTypeEntity menuType = loadCurrentOther(daoSession.getMenuTypeEntityDao(), cursor, offset);
        entity.setMenuType(menuType);

        return entity;    
    }

    public FoodEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<FoodEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<FoodEntity> list = new ArrayList<FoodEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<FoodEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<FoodEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
