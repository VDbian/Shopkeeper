package com.admin.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.admin.shopkeeper.entity.Season;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SEASON".
*/
public class SeasonDao extends AbstractDao<Season, String> {

    public static final String TABLENAME = "SEASON";

    /**
     * Properties of entity Season.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GuId = new Property(0, String.class, "guId", true, "GU_ID");
        public final static Property ProtuctID = new Property(1, String.class, "protuctID", false, "PROTUCT_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Price = new Property(3, double.class, "price", false, "PRICE");
        public final static Property RestaurantId = new Property(4, String.class, "restaurantId", false, "RESTAURANT_ID");
        public final static Property ProtuctName = new Property(5, String.class, "ProtuctName", false, "PROTUCT_NAME");
        public final static Property Type = new Property(6, boolean.class, "type", false, "TYPE");
    }


    public SeasonDao(DaoConfig config) {
        super(config);
    }
    
    public SeasonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEASON\" (" + //
                "\"GU_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: guId
                "\"PROTUCT_ID\" TEXT," + // 1: protuctID
                "\"NAME\" TEXT," + // 2: name
                "\"PRICE\" REAL NOT NULL ," + // 3: price
                "\"RESTAURANT_ID\" TEXT," + // 4: restaurantId
                "\"PROTUCT_NAME\" TEXT," + // 5: ProtuctName
                "\"TYPE\" INTEGER NOT NULL );"); // 6: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEASON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Season entity) {
        stmt.clearBindings();
 
        String guId = entity.getGuId();
        if (guId != null) {
            stmt.bindString(1, guId);
        }
 
        String protuctID = entity.getProtuctID();
        if (protuctID != null) {
            stmt.bindString(2, protuctID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindDouble(4, entity.getPrice());
 
        String restaurantId = entity.getRestaurantId();
        if (restaurantId != null) {
            stmt.bindString(5, restaurantId);
        }
 
        String ProtuctName = entity.getProtuctName();
        if (ProtuctName != null) {
            stmt.bindString(6, ProtuctName);
        }
        stmt.bindLong(7, entity.getType() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Season entity) {
        stmt.clearBindings();
 
        String guId = entity.getGuId();
        if (guId != null) {
            stmt.bindString(1, guId);
        }
 
        String protuctID = entity.getProtuctID();
        if (protuctID != null) {
            stmt.bindString(2, protuctID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindDouble(4, entity.getPrice());
 
        String restaurantId = entity.getRestaurantId();
        if (restaurantId != null) {
            stmt.bindString(5, restaurantId);
        }
 
        String ProtuctName = entity.getProtuctName();
        if (ProtuctName != null) {
            stmt.bindString(6, ProtuctName);
        }
        stmt.bindLong(7, entity.getType() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Season readEntity(Cursor cursor, int offset) {
        Season entity = new Season( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // guId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // protuctID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getDouble(offset + 3), // price
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // restaurantId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ProtuctName
            cursor.getShort(offset + 6) != 0 // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Season entity, int offset) {
        entity.setGuId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setProtuctID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPrice(cursor.getDouble(offset + 3));
        entity.setRestaurantId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProtuctName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(Season entity, long rowId) {
        return entity.getGuId();
    }
    
    @Override
    public String getKey(Season entity) {
        if(entity != null) {
            return entity.getGuId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Season entity) {
        return entity.getGuId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
